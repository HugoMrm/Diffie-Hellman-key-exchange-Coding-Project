import random

def mod_exp(base, exp, mod): # Function allowing to do the following operation : (base^(exp)) % mod
    result = 1
    base = base % mod # Does a first modulo operation on the base, in the case the number is too big to be computed
    while exp > 0:
        if exp % 2 == 1:
            result = (result * base) % mod
        exp = exp // 2
        base = (base ** 2) % mod
    return result

def generate_keypair(p, g): # Function allowing to generate a keypair : private_key + public_key
    private_key = random.randint(2, p - 2) # Allows to exclude the values 0 and p-1 (they will always result in a public key of 1)
                                           # and the value 1 (which will often result in a public key equal to "g")
    public_key = mod_exp(g, private_key, p)
    return private_key, public_key

def compute_shared_secret(private_key, other_public_key, p): # Function allowing to  compute the shared secret (same number for the two users Alice and Bob)
    return mod_exp(other_public_key, private_key, p)

# Example usage
# Choose large prime numbers for security, these are just examples
p = int(input("Enter a prime number (p): ")) # 23
g = int(input("Enter a generator (g): ")) # 5

# Alice's key pair
alice_private_key, alice_public_key = generate_keypair(p, g)

# Bob's key pair
bob_private_key, bob_public_key = generate_keypair(p, g)

# Exchange public keys
shared_secret_alice = compute_shared_secret(alice_private_key, bob_public_key, p)
shared_secret_bob = compute_shared_secret(bob_private_key, alice_public_key, p)

print(f" ")
print(f"Alice's private key: {alice_private_key}")
print(f"Alice's public key: {alice_public_key}")
print(f" ")
print(f"Bob's private key: {bob_private_key}")
print(f"Bob's public key: {bob_public_key}")
print(f" ")
print(f"Shared secret (Alice): {shared_secret_alice}")
print(f"Shared secret (Bob): {shared_secret_bob}")
